-- kavo library
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local w = Library.CreateLib("Godzilla Simulator", "Ocean")

-- service
local Players = game:GetService("Players")
local lp = Players.LocalPlayer
local mouse = lp:GetMouse()
local TextService = game:GetService("TextService")
local RunService = game:GetService("RunService")

local main = w:NewTab("Main")
local other = w:NewTab("Other")

-- main
do
    getgenv().Selected = nil;
    getgenv().Farm = false;
    getgenv().Rebirth = false;
    getgenv().RebirthTarget = 10;
    local buildinglist = {
        "Tree",
        "Store",
        "Barn",
        "Hay",
        "Tower",
        "Car",
        "Bench",
        "Casino",
        "Silo",
        "Stoplight",
        "House",
        "Apartments",
        "Supermarket",
        "Station",
        "School",
        "OilRig",
        "GasStation",
    }
    local farm = main:NewSection("Farming")
    local status = farm:NewLabel("Status: waiting...")
    farm:NewDropdown("Select Building", "none desc", buildinglist, function(x)
        getgenv().Selected = x
    end)
    farm:NewToggle("Auto farm", "none desc", function(x)
        getgenv().Farm = x
    end)    

    farm:NewSlider("Rebirth Target", "none desc", 100,10, function(amount)
        getgenv().RebirthTarget = amount
    end)

    farm:NewToggle("Auto Rebirth", "none desc", function(x)
        getgenv().Rebirth = x
    end)

    spawn(function()
        while getgenv().Rebirth == true do
            if game:GetService("ReplicatedStorage").DataBag[lp.Name].Size.Value == getgenv().RebirthTarget or game:GetService("ReplicatedStorage").DataBag[lp.Name].Size.Value > getgenv().RebirthTarget then
                -- Script generated by SimpleSpy - credits to exx#9394
                game:GetService("ReplicatedStorage").Daigo:FireServer()
            end
            wait(.1)
        end
    end)

    spawn(function()
        local building = nil;
        local cf;
        local remote;
        for i,v in ipairs(game.ReplicatedStorage:GetDescendants()) do
            if v:IsA("RemoteEvent") and v.Name == "Sonsho" then
                remote = v
            end
        end
        while wait(.01) do
            if getgenv().Farm == true and getgenv().Selected ~= nil then
                repeat
                    for i,v in ipairs(workspace["Interactables"]:GetChildren()) do
                        if v:IsA("Model") and string.match(v.Name, getgenv().Selected) ~= nil and v:FindFirstChild("Main") and v.Stage.Value ~= "Dead" then
                            building = v
                        end
                    end
                    status:UpdateLabel("Status: Finding")
                    wait(.2)
                until building ~= nil or getgenv().Farm == false
                if lp.Character ~= nil and lp.Character:FindFirstChild("HumanoidRootPart") and lp.Character.Humanoid.Health > 0 then
                    repeat
                        for i,v in ipairs(building:GetChildren()) do
                            if v:IsA("Part") and v.CanCollide == true then v.CanCollide = false end
                        end
                        status:UpdateLabel("Status: Building Health | "..building.Crumble.Value)
                        cf = building.Main.CFrame * CFrame.new(0, -2, 0)
                        lp.Character.HumanoidRootPart.CFrame = cf
                        remote:FireServer(building.Main)
                        wait(.005)
                    until building.Stage.Value == "Dead" or getgenv().Farm == false
                else
                    repeat status:UpdateLabel("Status: Waiting Character") wait(.01) until getgenv().Farm == false or lp.Character ~= nil and lp.Character:FindFirstChild("HumanoidRootPart") and lp.Character.Humanoid.Health > 0
                end
                if getgenv().Farm == false then building = nil; status:UpdateLabel("Status: waiting...") end
            end
        end
    end)

    local char = main:NewSection("Character")
    char:NewSlider("Walk Speed", "none desc", 300, 0, function(x)
        if lp.Character ~= nil and lp.Character.Humanoid then
            lp.Character.Humanoid.WalkSpeed = x
        end
    end)
    char:NewSlider("Jump Height", "none desc", 300, 0, function(x)
        if lp.Character ~= nil and lp.Character.Humanoid then
            lp.Character.Humanoid.JumpPower = x
            if lp.Character.Humanoid.UseJumpPower == false then
                lp.Character.Humanoid.UseJumpPower = true
            end
        end
    end)
end
-- other
do
    local visual = other:NewSection("Visual")
    getgenv().rainbowchr = false;
    visual:NewToggle("Rainbow Character", "make urself rainbow", function(x)
        getgenv().rainbowchr = x
    end)

    RunService.RenderStepped:Connect(function()
        if getgenv().rainbowchr == true then
            if lp.Character ~= nil then
                for i,v in pairs(lp.Character:GetChildren()) do
                    if v:IsA("Model") and v.Name == "MTorso" then
                        for _,mesh in ipairs(v:GetChildren()) do
                            if mesh:IsA("MeshPart") then
                                if mesh.Material ~= Enum.Material.ForceField then
                                    mesh.Material = Enum.Material.ForceField
                                end
    
                                mesh.Color = Color3.fromHSV(tick() % 3.5 / 3.5, 1,1)
                            end
                        end
                    end
                    if v:IsA("Model") and v.Name == "MTail" then
                        for _,mesh in ipairs(v:GetChildren()) do
                            if mesh:IsA("MeshPart") then
                                if mesh.Material ~= Enum.Material.ForceField then
                                    mesh.Material = Enum.Material.ForceField
                                end
    
                                mesh.Color = Color3.fromHSV(tick() % 3.5 / 3.5, 1,1)
                            end
                        end
                    end
                    if v:IsA("Model") and v.Name == "MLegs" then
                        for _,mesh in ipairs(v:GetChildren()) do
                            if mesh:IsA("MeshPart") then
                                if mesh.Material ~= Enum.Material.ForceField then
                                    mesh.Material = Enum.Material.ForceField
                                end
    
                                mesh.Color = Color3.fromHSV(tick() % 3.5 / 3.5, 1,1)
                            end
                        end
                    end
                    if v:IsA("Model") and v.Name == "MRarm" then
                        for _,mesh in ipairs(v:GetChildren()) do
                            if mesh:IsA("MeshPart") then
                                if mesh.Material ~= Enum.Material.ForceField then
                                    mesh.Material = Enum.Material.ForceField
                                end
    
                                mesh.Color = Color3.fromHSV(tick() % 3.5 / 3.5, 1,1)
                            end
                        end
                    end
                    if v:IsA("Model") and v.Name == "MLarm" then
                        for _,mesh in ipairs(v:GetChildren()) do
                            if mesh:IsA("MeshPart") then
                                if mesh.Material ~= Enum.Material.ForceField then
                                    mesh.Material = Enum.Material.ForceField
                                end
    
                                mesh.Color = Color3.fromHSV(tick() % 3.5 / 3.5, 1,1)
                            end
                        end
                    end
                    if v:IsA("Model") and v.Name == "MHead" then
                        for _,mesh in ipairs(v:GetChildren()) do
                            if mesh:IsA("MeshPart") then
                                if mesh.Material ~= Enum.Material.ForceField then
                                    mesh.Material = Enum.Material.ForceField
                                end
    
                                mesh.Color = Color3.fromHSV(tick() % 3.5 / 3.5, 1,1)
                            end
                        end
                    end
                end
            end
        end
    end)

    local misc = other:NewSection("Misc")
    misc:NewToggle("Remove Fog", "none desc", function(z)
        if z then
            game:GetService("Lighting").FogEnd = 100000000
        else
            game:GetService("Lighting").FogEnd = 500
        end
    end)

    local credit = other:NewSection("Credit")
    credit:NewLabel("Scripting: Ghost-Ducky#7698")
    credit:NewLabel("ui: Kavo Library | xHeptc")
end
